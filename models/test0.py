import numpy as np
from layers import Dense, MeanSquaredError, GradientDescent
from model import Sequential
import matplotlib.pyplot as plt

def create_model():
    model = Sequential(output_shape=3)

    W1 = np.array([[0.59458569, 0.30955906, 0.97983673],
       [0.41993164, 0.75663402, 0.32513868],
       [0.45912652, 0.2484019 , 0.22174991],
       [0.70830233, 0.88131654, 0.93103178],
       [0.98088332, 0.83232309, 0.01684548]])


    model.add(Dense(units=3, activation="sigmoid", W=W1))

    model.compile(loss=MeanSquaredError(), optimizer=GradientDescent(learning_rate=0.01))

    return model

m, c = 5, 12
linear = lambda x: np.concatenate((x, np.zeros((x.shape[0], 5))), axis=1) * 10



# X = np.random.uniform(size=(20, 5))*10
# y = linear(X)
X =np.array([
    [0.37342291, 0.89042431, 0.16474483, 0.81601524, 0.05943349],
    [0.69314523, 0.45154376, 0.21766751, 0.48943056, 0.33270709],
    [0.56986052, 0.64529707, 0.1391218, 0.42827935, 0.65229916],
    [0.74305514, 0.70814273, 0.72401561, 0.20598358, 0.73261469],
    [0.55444228, 0.33020058, 0.48445992, 0.45348163, 0.96502619],
    [0.37412159, 0.14085241, 0.78346629, 0.00588357, 0.92205353],
    [0.63353835, 0.35270577, 0.61127885, 0.74139291, 0.15091345],
    [0.31639353, 0.46642332, 0.49137373, 0.33449728, 0.42137058],
    [0.83728795, 0.24351749, 0.48754855, 0.47418168, 0.32074814],
    [0.09386686, 0.25263567, 0.47966552, 0.74641435, 0.13526741],
    [0.68944833, 0.92272886, 0.1362212, 0.7020667, 0.89521384],
    [0.55350984, 0.08084388, 0.3076063, 0.29016891, 0.29705208],
    [0.58426477, 0.97859832, 0.08391335, 0.69580241, 0.14345285],
    [0.64031419, 0.8229197, 0.7532648, 0.14426478, 0.60688124],
    [0.97867845, 0.28647657, 0.47322402, 0.65723896, 0.49975968],
    [0.3189266, 0.35047049, 0.87625161, 0.5729564, 0.76918894],
    [0.59218391, 0.49830177, 0.64663148, 0.25750718, 0.37425824],
    [0.48262878, 0.66153688, 0.72521139, 0.19981822, 0.47827814],
    [0.47682251, 0.73232171, 0.66959598, 0.27834694, 0.67240806],
    [0.53034278, 0.29313847, 0.75356527, 0.37260476, 0.41225283]
])

y = np.array([[0.2020845 , 0.30817835, 0.39817399],
       [0.91247754, 0.47206377, 0.31739538],
       [0.73662305, 0.75582634, 0.46274616],
       [0.29124334, 0.14933253, 0.75610538],
       [0.80984614, 0.61452948, 0.13889423],
       [0.56905917, 0.33124379, 0.45326456],
       [0.43105031, 0.81935471, 0.52716034],
       [0.88267863, 0.71903923, 0.10809145],
       [0.38684114, 0.87229415, 0.96564312],
       [0.23468512, 0.59874209, 0.81598763],
       [0.71419198, 0.25975932, 0.58996792],
       [0.11877445, 0.36580989, 0.25361795],
       [0.73593814, 0.86494207, 0.94627927],
       [0.49813934, 0.71425749, 0.6271384 ],
       [0.38561974, 0.40820251, 0.27385341],
       [0.17379574, 0.7545398 , 0.71967885],
       [0.82792756, 0.15102513, 0.96184547],
       [0.58973253, 0.40836982, 0.38779156],
       [0.62913754, 0.8692358 , 0.50438502],
       [0.31847295, 0.75664127, 0.60391815]])

X.shape, y.shape

model = create_model()

print(X.shape, y.shape)
mse = MeanSquaredError()


print(mse.forward(model.predict(X), y))
print("---------------------------------")
# pred1= mse.forward(model.predict(X), y)

# dW = 1e-6
# model._Sequential__layers[0]._Dense__W[0][0] += dW

# pred2= mse.forward(model.predict(X), y)

# model = create_model()

# model.fit(X, y, epoch=1)
# print(model._Sequential__layers[0].W_list[0][0][0] - model._Sequential__layers[0].W_list[1][0][0])
# print((pred2-pred1)/dW)

model.fit(X, y, epoch=10000)
print(mse.forward(model.predict(X), y))

plt.plot(model.save_loss)
plt.show()

print("-------------------------------")
# print(mse.forward(y_pred, y))
# model.fit(X, y)
